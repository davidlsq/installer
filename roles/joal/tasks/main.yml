# Install package

- name: Package
  ansible.builtin.apt:
    name: default-jre
    state: present

# Create lib

- name: Create lib directory
  ansible.builtin.file:
    path: '{{ joal_lib }}'
    state: directory
    owner: root
    group: root
    mode: u=rwx,go=rx

- name: Check lib
  ansible.builtin.include_role:
    name: check_archive
  vars:
    check_archive_url: '{{ joal_archive }}'
    check_archive_files:
      - 'jack-of-all-trades-{{ joal_version }}.jar'
      - 'clients/{{ joal_client }}.client'
    check_archive_creates: '{{ joal_lib }}/jack-of-all-trades-{{ joal_version }}.jar'

- name: Create lib
  ansible.builtin.unarchive:
    src: '{{ joal_archive }}'
    remote_src: true
    dest: '{{ joal_lib }}'
    owner: root
    group: root
    mode: u+rw,go-w+r
    creates: '{{ joal_lib }}/jack-of-all-trades-{{ joal_version }}.jar'
  when: not ansible_check_mode
  register: create_lib

# Create var

- name: Create var directory
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    owner: '{{ joal_user }}'
    group: '{{ joal_user }}'
    mode: ug=rwx,o=rx
  with_items:
    - '{{ joal_var }}'
    - '{{ joal_var }}/clients'
    - '{{ joal_var }}/torrents'
    - '{{ joal_var }}/torrents/archived'

- name: Create client config
  ansible.builtin.copy:
    src: '{{ joal_lib }}/clients/{{ joal_client }}.client'
    remote_src: true
    dest: '{{ joal_var }}/clients/{{ joal_client }}.client'
    owner: '{{ joal_user }}'
    group: '{{ joal_user }}'
    mode: ug=rw,o=r
  when: not ansible_check_mode
  register: create_client_config

- name: Create config
  ansible.builtin.template:
    src: config.json.j2
    dest: '{{ joal_var }}/config.json'
    owner: '{{ joal_user }}'
    group: '{{ joal_user }}'
    mode: ug=rw,o=r
  register: create_config

# Create service

- name: Create service
  ansible.builtin.template:
    src: service.j2
    dest: '/etc/systemd/system/{{ joal_name }}.service'
    owner: root
    group: root
    mode: u=rw,go=r
  register: create_service

- name: Enable
  ansible.builtin.systemd:
    name: '{{ joal_name }}'
    enabled: true

- name: Restart
  ansible.builtin.systemd:
    name: '{{ joal_name }}'
    state: restarted
    daemon_reload: true
  when: >
    create_lib is changed or
    create_client_config is changed or
    create_config is changed or
    create_service is changed

- name: Start
  ansible.builtin.systemd:
    name: '{{ joal_name }}'
    state: started
