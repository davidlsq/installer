---

- name: Import "user" role
  when: user_name != "root"
  ansible.builtin.import_role:
    name: user
  vars:
    user_system: true
    user_notify: systemd restart

- name: 'Directory "/opt" exists'
  ansible.builtin.file:
    path: /opt
    state: directory
    owner: root
    group: root
    mode: u=rwx,go=rx

- name: 'Directory "{{ service_opt }}" exists'
  ansible.builtin.file:
    path: '{{ service_opt }}'
    state: directory
    owner: root
    group: root
    mode: u=rwx,go=rx

- name: 'Directories readonly exists'
  loop: '{{ service_readonly | flatten }}'
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    owner: root
    group: root
    mode: u=rwx,go=rx

- name: 'Directories readwrite exists'
  loop: '{{ service_readwrite | flatten }}'
  ansible.builtin.file:
    path: '{{ item }}'
    state: directory
    owner: '{{ user_name }}'
    group: '{{ user_name }}'
    mode: u=rwx,go=

- name: Include "chown" role
  loop: '{{ service_readwrite | flatten }}'
  ansible.builtin.include_role:
    name: chown
  vars:
    chown_path: '{{ item }}'
    chown_user_name: '{{ user_name }}'
    chown_notify: service restart

- name: Include "chroot" role
  when: service_chrooted
  ansible.builtin.include_role:
    name: chroot
  vars:
    chroot_path: '{{ service_chroot }}'
    chroot_packages: '{{ service_packages }}'
    chroot_notify: service restart

- name: 'Service "{{ service_name }}" has its packages installed'
  when: not service_chrooted
  ansible.builtin.apt:
    name: '{{ service_packages }}'
    state: present
  notify: service restart

- name: 'Config "/etc/systemd/system/{{ service_name }}.service" exists'
  ansible.builtin.template:
    src: service.conf.j2
    dest: '/etc/systemd/system/{{ service_name }}.service'
    owner: root
    group: root
    mode: u=rw,go=r
  notify: service restart

- name: 'Service "{{ service_name }}" is enabled'
  ansible.builtin.systemd:
    name: '{{ service_name }}'
    daemon_reload: true
    enabled: true
