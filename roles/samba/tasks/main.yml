---

- name: Include "archive" role
  ansible.builtin.include_role:
    name: archive
  vars:
    archive_url: >
      https://download.samba.org/pub/samba/samba-{{ samba_version }}.tar.gz
    archive_dest: '{{ service_opt }}/src-{{ samba_version }}.tar.gz'
    archive_content: '{{ __samba_src }}'
    archive_creates: '{{ __samba_src }}/configure'
    archive_transform: 'samba-{{ samba_version }}'

- name: 'Directory "{{ __samba_var }}" is populated'
  loop:
    - state
    - state/run
    - private
  loop_control:
    label: 'Directory "{{ __samba_var }}/{{ item }}" exists'
  ansible.builtin.file:
    path: '{{ __samba_var }}/{{ item }}'
    state: directory
    owner: '{{ user_name }}'
    group: '{{ user_name }}'
    mode: u=rwx,go=

- name: 'Binaries "{{ __samba_bin }}" are compiled'
  vars:
    service_run_script: |
      set -e -o pipefail
      ./bootstrap/generated-dists/debian12/bootstrap.sh
      ./configure \
        --prefix="{{ __samba_bin }}" \
        --sysconfdir="{{ __samba_etc }}" \
        --with-piddir="{{ __samba_run }}" \
        --localstatedir="{{ __samba_var }}/state" \
        --with-privatedir="{{ __samba_var }}/private" \
        --with-logfilebase="{{ __samba_log }}"
      make -j 8
      make -j 8 install
    service_run_user: root
    service_run_chdir: '{{ __samba_src }}'
    service_run_readwrite:
      - '{{ __samba_src }}'
      - '{{ __samba_bin }}'
    service_run_log: '{{ __samba_src }}/build.log'
  ansible.builtin.shell: '{{ service_run }}'
  args:
    executable: /bin/bash
    creates: '{{ __samba_bin }}/sbin/smbd'

- name: 'Config "{{ __samba_etc }}/smb.conf" exists'
  ansible.builtin.template:
    src: smb.conf.j2
    dest: '{{ __samba_etc }}/smb.conf'
    owner: root
    group: root
    mode: u=rw,go=r
  notify: service restart

- name: Package "avahi-daemon" is installed
  when: __samba_shares | map(attribute="timemachine") is any
  ansible.builtin.apt:
    name: avahi-daemon
    state: present

- name: 'Service "avahi-daemon" is configured'
  loop: '{{ __samba_shares | selectattr("timemachine") }}'
  vars:
    avahi_config: '/etc/avahi/services/{{ item.name | lower }}.service'
  loop_control:
    label: 'Config "{{ avahi_config }}" exists'
  ansible.builtin.template:
    src: avahi.conf.j2
    dest: '{{ avahi_config }}'
    owner: root
    group: root
    mode: u=rw,go=r
  notify: avahi restart

- name: 'Start service "{{ service_name }}"'
  ansible.builtin.systemd:
    name: '{{ service_name }}'
    state: started

- name: 'Chroot contains host users'
  when: service_chrooted
  loop:
    - /etc/group
    - /etc/passwd
  ansible.builtin.copy:
    src: '{{ item }}'
    dest: '{{ service_chroot }}{{ item }}'
    remote_src: true
    owner: root
    group: root
    mode: u=rw,go=r

- name: 'Users are authorized'
  when: samba_users is defined
  loop: '{{ samba_users }}'
  vars:
    service_run_script: |
      set -e -o pipefail
      if ! ./smbclient -U {{ item.name }}%{{ item.password }} -L {{ samba_address }}; then
      {% if not ansible_check_mode %}
        (echo "{{ item.password }}"; echo "{{ item.password }}") | ./smbpasswd -a "{{ item.name }}"
      {% endif %}
        echo CHANGED
      fi
    service_run_user: root
    service_run_chdir: '{{ __samba_bin }}/bin'
    service_run_readonly:
      - '{{ __samba_bin }}'
      - '{{ __samba_etc }}'
    service_run_readwrite:
      - '{{ __samba_var }}'
  ansible.builtin.shell: '{{ service_run }}'
  args:
    executable: /bin/bash
  check_mode: false
  register: __samba_authorized_output
  changed_when: >
    __samba_authorized_output.stdout_lines | last | default == "CHANGED"
  no_log: true
