# Install package

- name: Package
  ansible.builtin.apt:
    name:
      - curl
      - sqlite3
      - python3-lxml
    state: present

# Software vars

- name: Include vars
  ansible.builtin.include_vars: '{{ servarr_software }}.yml'

# Create lib

- name: Create lib directory
  ansible.builtin.file:
    path: '{{ servarr_lib }}'
    state: directory
    owner: root
    group: root
    mode: u=rwx,go=rx

- name: Check lib
  ansible.builtin.include_role:
    name: check_archive
  vars:
    check_archive_url: '{{ servarr_archive }}'
    check_archive_files:
      - '{{ servarr_executable }}/{{ servarr_executable }}'
    check_archive_creates: '{{ servarr_lib }}/{{ servarr_executable }}'

- name: Create lib
  ansible.builtin.unarchive:
    src: '{{ servarr_archive }}'
    remote_src: true
    dest: '{{ servarr_lib }}'
    owner: root
    group: root
    mode: u+rw,go-w+r
    creates: '{{ servarr_lib }}/{{ servarr_executable }}'
    extra_opts:
      - --transform
      - 's/^{{ servarr_executable }}//'
  when: not ansible_check_mode
  register: create_lib

# Create var

- name: Create var directory
  ansible.builtin.file:
    path: '{{ servarr_var }}'
    state: directory
    owner: '{{ servarr_user }}'
    group: '{{ servarr_user }}'
    mode: ug=rwx,o=rx

- name: Check config
  ansible.builtin.stat:
    path: '{{ servarr_var }}/config.xml'
  register: check_config

- name: Init config
  ansible.builtin.copy:
    content: <Config></Config>
    dest: '{{ servarr_var }}/config.xml'
    owner: '{{ servarr_user }}'
    group: '{{ servarr_user }}'
    mode: u=rw,go=r
  when: not check_config.stat.exists

- name: Create config
  community.general.xml:
    path: '{{ servarr_var }}/config.xml'
    xpath: '/Config/{{ item[0] }}'
    value: '{{ item[1] | string }}'
  loop: '{{ servarr_config }}'
  register: create_config

- name: Fix permissions
  ansible.builtin.include_role:
    name: fix_permissions
  vars:
    fix_permissions_dir: '{{ servarr_var }}'
    fix_permissions_user: '{{ servarr_user }}'

# Create service

- name: Create service
  ansible.builtin.template:
    src: service.j2
    dest: '/etc/systemd/system/{{ servarr_name }}.service'
    owner: root
    group: root
    mode: u=rw,go=r
  register: create_service

- name: Enable
  ansible.builtin.systemd:
    name: '{{ servarr_name }}'
    enabled: true

- name: Restart
  ansible.builtin.systemd:
    name: '{{ servarr_name }}'
    daemon_reload: true
    state: restarted
  when: >
    create_lib is changed or
    create_config is changed or
    create_service is changed

- name: Start
  ansible.builtin.systemd:
    name: '{{ servarr_name }}'
    state: started
